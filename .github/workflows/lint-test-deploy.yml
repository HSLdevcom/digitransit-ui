name: lint, test & push Docker image

on:
  push:
    branches:
      - '*'
    tags:
      - 'release_*'
  pull_request:
    branches:
      - '*'

env:
  # We tell Playwright not to download browser binaries because we use microsoft/playwright-github-action.
  # https://github.com/microsoft/playwright/blob/v1.16.2/installation-tests/installation-tests.sh#L200-L216
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'

jobs:
  # install dependencies, build shared components, cache both for subsequent jobs
  install:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # https://github.com/actions/cache/blob/8f1e2e02865c42348f9baddbbaafb1841dce610a/examples.md#node---yarn-2
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Cache .yarn/cache
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v3
        with:
          path: '.yarn/cache'
          key: yarn-cache-${{ github.ref_name }}
          restore-keys: yarn-cache-v3
      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: yarn install --immutable

      - name: cache shared components
        id: cache-shared-components
        uses: actions/cache@v3
        with:
          path: 'digitransit-*'
          key: ${{ runner.os }}-shared-components-${{ hashFiles('digitransit-*') }}
      - name: build shared components
        if: ${{ steps.cache-shared-components.outputs.cache-hit != 'true' }}
        run: yarn run build-workspaces

  lint:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: "Set time zone to Europe/Helsinki"
        uses: zcong1993/setup-timezone@master
        with:
          timezone: "Europe/Helsinki"
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # https://github.com/actions/cache/blob/8f1e2e02865c42348f9baddbbaafb1841dce610a/examples.md#node---yarn-2
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Cache .yarn/cache
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v3
        with:
          path: '.yarn/cache'
          key: yarn-cache-${{ github.ref_name }}
          restore-keys: yarn-cache-v3
      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: yarn install --immutable

      - name: cache shared components
        id: cache-shared-components
        uses: actions/cache@v3
        with:
          path: 'digitransit-*'
          key: ${{ runner.os }}-shared-components-${{ hashFiles('digitransit-*') }}
      - name: Build shared components
        if: ${{ steps.cache-shared-components.outputs.cache-hit != 'true' }}
        run: yarn run build-workspaces

      - name: Run linters
        run: yarn lint
      - name: lint SVG sprites using xmllint
        run: |
          sudo apt install -y libxml2-utils
          xmllint --nonet --noout static/assets/svg-sprite.*.svg

  build:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # https://github.com/actions/cache/blob/8f1e2e02865c42348f9baddbbaafb1841dce610a/examples.md#node---yarn-2
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Cache .yarn/cache
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v3
        with:
          path: '.yarn/cache'
          key: yarn-cache-${{ github.ref_name }}
          restore-keys: yarn-cache-v3
      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: yarn --immutable

      - name: cache shared components
        id: cache-shared-components
        uses: actions/cache@v3
        with:
          path: 'digitransit-*'
          key: ${{ runner.os }}-shared-components-${{ hashFiles('digitransit-*') }}
      - name: build shared components
        if: ${{ steps.cache-shared-components.outputs.cache-hit != 'true' }}
        run: yarn run build-workspaces

      - name: cache built Relay queries & UI
        id: cache-ui-build
        uses: actions/cache@v3
        with:
          path: |
            ./_static
            ./manifest.json
            ./stats.json
            ./__generated__
            **/__generated__
          key: relay-ui-${{ github.sha }}
      - name: build Relay queries & UI
        if: ${{ steps.cache-ui-build.outputs.cache-hit != 'true' }}
        run: |
          yarn build

  unit-test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: "Set time zone to Europe/Helsinki"
        uses: zcong1993/setup-timezone@master
        with:
          timezone: "Europe/Helsinki"
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # https://github.com/actions/cache/blob/8f1e2e02865c42348f9baddbbaafb1841dce610a/examples.md#node---yarn-2
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Cache .yarn/cache
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v3
        with:
          path: '.yarn/cache'
          key: yarn-cache-${{ github.ref_name }}
          restore-keys: yarn-cache-v3
      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: yarn install --immutable

      - name: cache shared components
        id: cache-shared-components
        uses: actions/cache@v3
        with:
          path: 'digitransit-*'
          key: ${{ runner.os }}-shared-components-${{ hashFiles('digitransit-*') }}
      - name: Build shared components
        if: ${{ steps.cache-shared-components.outputs.cache-hit != 'true' }}
        run: yarn run build-workspaces

      - name: cache built Relay queries & UI
        id: cache-ui-build
        uses: actions/cache@v3
        with:
          path: |
            ./_static
            ./manifest.json
            ./stats.json
            ./__generated__
            **/__generated__
          key: relay-ui-${{ github.sha }}
      - name: build Relay queries & UI
        if: ${{ steps.cache-ui-build.outputs.cache-hit != 'true' }}
        run: |
          yarn build

      - name: Run unit tests
        run: yarn run test-coverage
      - name: Send test coverage report
        run: yarn run test-report

  docker-push:
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'release_')
    needs:
      - lint
      - unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set time zone to Europe/Helsinki
        uses: zcong1993/setup-timezone@master
        with:
          timezone: "Europe/Helsinki"

      - name: Create buildInfo.js file
        run: |
          echo -e "export const COMMIT_ID = \"${GITHUB_SHA}\";\nexport const BUILD_TIME = \"$(date -Iminutes -u)\";" >app/buildInfo.js
      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: log into GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: parse name of bbnavi config from Git tag
        id: bbnavi-config
        # Strip "release_" prefix & date suffix from Git tag, set as output.
        # With an invalid tag (e.g. `release_foo_bar`), this fails.
        run: |
          set -e -u -o pipefail # fail on errors
          sudo apt install --no-install-recommends -qq -y pcre2-utils
          set -x
          cfg="$(echo -n "${{ github.ref_name }}" | pcre2grep -o1 '(?:release_)([\w-]+)(?:_\d{4}-\d{2}-\d{2})')"
          echo "cfg=\"$cfg\"" >>$GITHUB_OUTPUT

      - name: compute Docker image metadata
        id: docker-meta
        run: |
          set -e -x -u -o pipefail # fail on errors
          echo "image=ghcr.io/${{ github.repository }}" >>$GITHUB_OUTPUT
          echo "permanent-tag=$(date +"%Y-%m-%dT%H.%M.%S")-${GITHUB_SHA:0:7}" >>$GITHUB_OUTPUT
          echo "release-tag=${{ github.ref_name }}" >>$GITHUB_OUTPUT

      - name: build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: |
            ${{ steps.docker-meta.outputs.image }}:${{ steps.docker-meta.outputs.permanent-tag }}
            ${{ steps.docker-meta.outputs.image }}:${{ steps.docker-meta.outputs.release-tag }}
          # https://github.com/docker/build-push-action/blob/9472e9021074a3cb3279ba431598b8836d40433f/docs/advanced/cache.md#github-cache
          # https://github.com/moby/buildkit#registry-push-image-and-cache-separately
          cache-from: type=gha
          cache-to: type=gha,mode=max,oci-mediatypes=true,compression=zstd
          push: true
