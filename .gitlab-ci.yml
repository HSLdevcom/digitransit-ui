variables:
  # GITLAB_API_URL: 'https://gitlab.tpwd.de/api'
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_AUTH_CONFIG: '{ "auths": { "https://index.docker.io/v1/": { "auth": "$DOCKER_AUTH" } }}'
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  QUANTUM_CLI: registry.internal.planetary-networks.de/quantum-public/cli:2
  QUANTUM_ENDPOINT: tpwd-bb-navi
  QUANTUM_PROJECT: bbnavi-digitransit-ui

stages:
  - prerequisites
  - lint-test
  - build-push
  - predeploy
  - deploy

.only-on-bbnavi-pushes:
  only:
    # todo: $CI_DEFAULT_BRANCH doesn't seem to work here?
    - bbnavi

.only-on-release-tags:
  only:
    - /^release_[\w-]+_\d{4}-\d{2}-\d{2}(_\d+)?$/
  except:
    - branches

.with-docker:
  services:
    - docker:20.10.14-dind

.parse-bbnavi-config-from-release-tag:
  before_script:
    # strip "release_" prefix & date suffix from Git tag, export as $BBNAVI_CONFIG
    - apk add --upgrade --no-cache pcre2-tools
    - export BBNAVI_CONFIG="$(echo -n "$CI_COMMIT_TAG" | pcre2grep -o1 '(?:release_)([\w-]+)(?:_\d{4}-\d{2}-\d{2})')"

expect-published-docker-img:
  extends:
    - .only-on-release-tags
    - .with-docker
  stage: prerequisites
  variables:
    TAG: $CI_COMMIT_SHA
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    # Using the registry API from the CI currently fails.
    # - apk add --upgrade --no-cache curl jq
    # - 'REPOSITORIES_URL="$GITLAB_API_URL/v4/projects/$CI_PROJECT_ID/registry/repositories"'
    # - 'REPOSITORY_ID="$(curl "$REPOSITORIES_URL" -H "JOB-TOKEN: $CI_JOB_TOKEN" -s | jq -rc ".[] | [.id, .path]" | grep -m1 "$CI_PROJECT_PATH" | jq ".[0]")"'
    # - 'TAG_URL="$REPOSITORIES_URL/$REPOSITORY_ID/tags/$TAG"'
    # - 'curl "$TAG_URL" -H "JOB-TOKEN: $CI_JOB_TOKEN" -s -o /dev/null"
    # Using `docker manifest inspect` currently fails if the image hasn't been pulled before. ðŸ¤”
    # - 'docker manifest inspect "$DOCKER_IMAGE:$TAG"'
    # So we use `docker pull` instead. ðŸ¤·
    - docker pull "$DOCKER_IMAGE:$TAG" >/dev/null

test-and-lint:
  # We don't lint & test on release tags because we assume that it has been done already in the branch pipeline.
  extends:
    - .only-on-bbnavi-pushes
  stage: lint-test
  image:
    # We mirror the Dockerfile here.
    name: node:10.23
  script:
    - yarn install --immutable
    - yarn build-workspaces
    - yarn run lint
    - yarn run relay
    - yarn run test-unit
  cache:
    key: $CI_PROJECT_PATH_SLUG-yarn-cache
    paths:
      - .yarn/cache
  interruptible: true

build-and-push-docker-img:
  extends:
    - .only-on-bbnavi-pushes
    - .with-docker
  stage: build-push
  variables:
    TAG: $CI_COMMIT_SHA
    CACHE_TAG: $CI_COMMIT_REF_NAME
  before_script:
    - docker login -u $DOCKERHUB_LOGIN -p $DOCKERHUB_PASSWORD
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    # Pull :$CACHE_TAG before & push it after, to leverage Docker caching.
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#make-docker-in-docker-builds-faster-with-docker-layer-caching
    - docker pull $DOCKER_IMAGE:$CACHE_TAG || true
    # Build & push actual :$TAG image.
    - docker build --cache-from $DOCKER_IMAGE:$CACHE_TAG --tag $DOCKER_IMAGE:$TAG .
    - docker push $DOCKER_IMAGE:$TAG
    # Adapt & push :$CACHE_TAG image.
    - docker tag $DOCKER_IMAGE:$TAG $DOCKER_IMAGE:$CACHE_TAG
    - docker push $DOCKER_IMAGE:$CACHE_TAG

generate-quantum-config:
  extends:
    - .only-on-release-tags
    - .with-docker
    - .parse-bbnavi-config-from-release-tag
  variables:
    DOCKER_TAG: $CI_COMMIT_SHA
  stage: predeploy
  image:
    name: docker/compose:1.25.5
  cache:
    key: "${CI_PIPELINE_ID}-${QUANTUM_PROJECT}"
    paths: [quantum.yml]
  script:
    - docker-compose -f docker-compose.yml -f deployment/stack.yml -f "deployment/stack.$BBNAVI_CONFIG.yml" config | tee quantum.yml

deploy-using-quantum:
  extends:
    - .only-on-release-tags
    - .parse-bbnavi-config-from-release-tag
  stage: deploy
  image: $QUANTUM_CLI
  cache:
    key: "${CI_PIPELINE_ID}-${QUANTUM_PROJECT}"
    paths: [quantum.yml]
  script:
    # The "bb-" namespace stands for "Brandenburg", in case we ever have instances in other regions.
    - quantum-cli stack update --create --stack "$QUANTUM_PROJECT-bb-$BBNAVI_CONFIG" --wait
  tags: [v2]
